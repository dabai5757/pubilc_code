# Define upstream server

upstream sso_login {
    server sso_login_dev:5010;
}

upstream frontend {
    server frontend_dev:${FRONT_CONTAINER_PORT};
}

upstream translation_service {
        least_conn;
        server translation_1:5004;
        server translation_2:5004;
        server translation_3:5004;
}

server {
    listen 80;
    server_name ${SERVER_ADDRESS};

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen ${NGINX_PORT} ssl;
    server_name ${SERVER_ADDRESS};

    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    client_max_body_size 10485760000; # 10GB

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location /sso_ui {
        alias /usr/share/nginx/html/sso_ui/;
        index index.html;
        proxy_connect_timeout ${TIMEOUT};
        proxy_send_timeout ${TIMEOUT};
        proxy_read_timeout ${TIMEOUT};
    }

    location /sso_login {
        client_max_body_size 10g;
        allow all;
        proxy_pass http://sso_login/login;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_connect_timeout ${TIMEOUT};
        proxy_send_timeout ${TIMEOUT};
        proxy_read_timeout ${TIMEOUT};
    }

    location /login/authorized {
        proxy_pass http://sso_login;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
    }

    # 认证检查的内部位置
    location = /auth/check {
        internal;
        proxy_pass http://sso_login;  # 替换为 Flask 应用地址
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 主路径的访问控制
    location / {
        auth_request /auth/check;  # 调用认证检查

        # 如果认证检查返回 401，则返回 403 Forbidden
        error_page 401 = @error401;

        # 代理到前端应用
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 未通过认证时的处理
    location @error401 {
        return 302 https://192.168.10.9:33380/sso_ui/;  # 重定向到登录页面
    }

    location ~ /api {
        client_max_body_size 5g;
        include uwsgi_params;
        uwsgi_pass unix:///tmp/uwsgi.sock;
        uwsgi_read_timeout ${TIMEOUT};
        uwsgi_send_timeout ${TIMEOUT};
        proxy_read_timeout ${TIMEOUT};
        proxy_connect_timeout ${TIMEOUT};
        proxy_send_timeout ${TIMEOUT};
        send_timeout ${TIMEOUT};
    }

    location /output_txt_files {
        alias /var/www/ai_server/output_txt_files;
        autoindex on;
        types {
            text/plain txt;
        }
        default_type application/octet-stream;
        add_header Content-Disposition "attachment";
    }

    location /ai_mode {
            proxy_pass http://translation_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout       ${TIMEOUT};
            proxy_send_timeout          ${TIMEOUT};
            proxy_read_timeout          ${TIMEOUT};
            send_timeout                ${TIMEOUT};
        }

    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
