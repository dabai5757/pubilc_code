version: '3.8'

services:
  mysql:
    build: ./sql
    image: image_sql
    container_name: mysql_container
    hostname: mysql_host
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - "${MYSQL_PORT}:${MYSQL_CONTAINER_PORT}"
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aibt_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  scaling_balancer:
    build: ./scaling_balancer
    image: image_scaling_balancer
    container_name: scaling_balancer_container
    environment:
      FLASK_ENV: development
      UPSTREAM_SERVERS: "127.0.0.1:${AI_SERVER_CONTAINER_PORT}"
      host_current_dir: ${host_current_dir}
      scaling_balancer_CONTAINER_PORT: ${scaling_balancer_CONTAINER_PORT}
    ports:
      - "${scaling_balancer_CONTAINER_PORT}:${scaling_balancer_CONTAINER_PORT}"
    depends_on:
      mysql:
        condition: service_healthy
      translation:
        condition: service_started
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - aibt_network

  request_counter:
    build: ./request_counter
    image: image_request_counter
    container_name: request_counter_containers
    depends_on:
      mysql:
        condition: service_healthy
      scaling_balancer:
        condition: service_started
      translation:
        condition: service_started
    env_file: .env
    ports:
      - "${request_counter_CONTAINER_PORT}:${request_counter_CONTAINER_PORT}"
    networks:
      - aibt_network

  db_to_queue:
    build: ./db_to_queue
    image: image_db_to_queue
    container_name: db_to_queue_containers
    depends_on:
      mysql:
        condition: service_healthy
      scaling_balancer:
        condition: service_started
      translation:
        condition: service_started
    env_file: .env
    ports:
      - "${db_to_queue_CONTAINER_PORT}:${db_to_queue_CONTAINER_PORT}"
    networks:
      - aibt_network

  translation:
    build: ./ai_server
    image: translation
    container_name: translation_1
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "${AI_SERVER_CONTAINER_PORT}:${AI_SERVER_CONTAINER_PORT}"
    volumes:
      - ./ai_server:/var/www/ai_server
      - ./backend/input_audio_files:/mnt/input_audio_files
      - /mnt/d/Transcription/Systranfaster_whisper_large_v2:/app/models/faster_whisper_large_v2
    tty: true
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
    env_file: .env
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    runtime: nvidia
    networks:
      - aibt_network

  frontend:
    container_name: frontend_dev
    build: ./frontend
    ports:
      - "${FRONT_CONTAINER_PORT}:${FRONT_CONTAINER_PORT}"
    volumes:
      - ./frontend:/var/www/frontend
    env_file: .env
    environment:
      - NODE_ENV=development
    networks:
      - aibt_network

  backend:
    container_name: backend_dev
    build: ./backend
    ports:
      - "${BACKEND_CONTAINER_PORT}:${BACKEND_CONTAINER_PORT}"
    command: uwsgi --ini /var/www/backend/uwsgi.ini
    volumes:
      - ./backend:/var/www/backend
      - /var/run/docker.sock:/var/run/docker.sock
      - socket:/tmp
    tty: true
    depends_on:
      - mysql
      - frontend
    env_file: .env
    networks:
      - aibt_network

  nginx:
    image: nginx:1.24
    container_name: aibt_nginx-dev
    env_file: .env
    networks:
      - aibt_network
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx:/etc/nginx/templates
      - ./backend:/var/www/backend
      - ./ai_server:/var/www/ai_server
      - ./nginx/log:/var/log/nginx
      - ./nginx/html:/usr/share/nginx/html
      - socket:/tmp
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    depends_on:
      - frontend
      - backend
    tty: true

networks:
  aibt_network:
    external: true

volumes:
  socket:
    name: socket_volume
